# Copyright 2009-2015 Wulf C. Krueger <philantrop@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

require udev-rules

export_exlib_phases src_prepare src_configure src_install pkg_postinst

SUMMARY="Generic F/OSS machine emulator and virtualizer"
DESCRIPTION="
QEMU emulates CPUs through dynamic binary translation and provides a set of device
models to run a variety of unmodified guest operating systems. QEMU can also be
used purely for CPU emulation for user level processes, allowing applications
compiled for one architecture to be run on another.
QEMU now includes full support for KVM (Kernel-based Virtual Machine) which is a
full virtualization solution for Linux on x86 hardware containing virtualization
extensions (Intel VT or AMD-V).
The kernel component of KVM is included in mainline Linux, as of 2.6.20.
"
HOMEPAGE="http://${PN}.org/"
DOWNLOADS="http://wiki.${PN}-project.org/download/${PNV}.tar.bz2"

BUGS_TO="philantrop@exherbo.org"
REMOTE_IDS="freecode:qemu"

LICENCES="GPL-2"
SLOT="0"

MYOPTIONS="
    alsa
    async [[ description = [ Enable asynchronous I/O using the kernels native interface ] ]]
    bluetooth
    debug [[ description = [ Enable common debugging features ] ]]
    gnutls [[ description = [ Enable TLS encryption for VNC server ] ]]
    (
        gtk2 [[ description = [ Enables the GTK+-2 GUI part of qemu ] ]]
        gtk3 [[ description = [ Enables the GTK+-3 GUI part of qemu ] ]]
    ) [[ number-selected = at-most-one ]]
    iasl [[ description = [ Enable QEMU to create ACPI tables directly ] ]]
    iscsi [[ description = [ Enable iSCSI support ] ]]
    jpeg [[ description = [ Enable JPEG lossy compression for VNC server ] ]]
    lzo [[ description = [ Support lzo compression ] ]]
    netmap [[ description = [ Support for very fast packet I/O from userspace using netmap/vale ] ]]
    nfs [[ description = [ Enable built-in NFS client support ] ]]
    opengl
    png [[ description = [ Enable PNG compression for VNC server ] ]]
    pulseaudio
    quorum [[ description = [ RAID-like protection for VM images by performing multiple writes and voting on the result ] ]]
    rbd [[ description = [ Support storage on rados block devices (rbd; ceph) ] ]]
    sasl [[ description = [ Enables SASL authentication for VNC server ] ]]
    sdl [[ description = [ Enables the SDL GUI part of qemu ] ]]
    smartcard [[ description = [ Enables smartcard support ] ]]
    snappy [[ description = [ Support snappy compression ] ]]
    spice [[ description = [ Enable the SPICE protocol, a remote-display system ] ]]
    ssh-block-dev [[ description = [ Enable support for ssh block devices ] ]]
    usb-passthrough [[ description = [ Enable USB passthrough support ] ]]
    usb-redirection [[ description = [ Enable USB redirection support ] ]]
    vde [[ description = [ Enable support for VDE-based networking ] ]]
    virtfs [[ description = [ Enable support for Plan 9 folder sharing over Virtio ] requires = [ xattr ] ]]
    xattr
    (
        aarch64 [[ description = [ build the AArch64 (ARM64) target ] ]]
        amd64 [[ description = [ build the amd64 (x86_64) target ] ]]
        arm [[ description = [ build the arm target ] ]]
        mips [[ description = [ build the mips target ] ]]
        ppc [[ description = [ build the ppc (powerpc) target ] ]]
        ppc64 [[ description = [ build the ppc64 (powerpc64) target ] ]]
        x86 [[ description = [ build the x86 target ] ]]
    ) [[ number-selected = at-least-one ]]
"

DEPENDENCIES="
    build:
        dev-lang/python:*[<3.0]
        virtual/pkg-config
        spice? ( virtualization-lib/spice-protocol[>=0.12.4] )
    build+run:
        dev-libs/glib:2[>=2.38]
        net-misc/curl[>=7.19.6]
        sys-apps/util-linux[>=2.16.1]
        sys-libs/libcap[>=2.24-r1] [[ description = [ needs an upstream patch ] ]]
        sys-libs/libcap-ng
        sys-libs/libseccomp[>=2.1.1]
        x11-libs/pixman:1[>=0.21.8]
        alsa? ( sys-sound/alsa-lib[>=1.0.13] )
        async? ( dev-libs/libaio[>=0.3.107] )
        bluetooth? ( net-wireless/bluez[>=4.9] )
        gnutls? ( dev-libs/gnutls )
        gtk2? (
            dev-libs/vte:0[>=0.24.0]
            x11-libs/gtk+:2[>=2.18.0]
        )
        gtk3? (
            dev-libs/vte:3.0[>=0.32.0]
            x11-libs/cairo
            x11-libs/gdk-pixbuf:2.0
            x11-libs/gtk+:3[>=3.0.0]
        )
        iasl? ( sys-power/iasl )
        iscsi? ( dev-libs/libiscsi[>=1.9.0] )
        jpeg? ( media-libs/jpeg:= )
        lzo? ( app-arch/lzo )
        netmap? ( net-libs/netmap )
        nfs? ( net-libs/libnfs[>=1.9.3] )
        opengl? ( x11-dri/mesa[X] )
        png? ( media-libs/libpng:= )
        pulseaudio? ( media-sound/pulseaudio )
        quorum? ( dev-libs/gnutls[>=2.10.0] )
        rbd? ( sys-cluster/ceph )
        sasl? ( net-libs/cyrus-sasl[>=2.1.22] )
        sdl? (
            media-libs/SDL:0[X][>=1.2.11]
            x11-libs/libX11
        )
        smartcard? (
            dev-libs/libcacard
            dev-libs/nss[>=3.13.3]
        )
        snappy? ( app-arch/snappy )
        spice? (
            virtualization-lib/spice[>=0.12.0]
            virtualization-lib/spice-protocol[>=0.12.4]
        )
        ssh-block-dev? ( net-libs/libssh2[>=1.2.8] )
        usb-passthrough? ( dev-libs/libusb:1[>=1.0.13] )
        usb-redirection? ( dev-libs/usbredir )
        vde? ( net/vde[>=2.2.2] )
        xattr? ( sys-apps/attr )
        !app-emulation/qemu [[
            description = [ Same package, different category ]
            resolution = [ uninstall-blocked-after ]
        ]]
        !app-virtualization/qemu-kvm [[
            description = [ qemu-kvm and qemu finally completely merged again. ]
            resolution = [ uninstall-blocked-after ]
        ]]
        group/kvm
"
#        rados? ( dev-libs/rados )

# The tests are a waste of time and resources. From the "getting started" part of the test description:
#    * Currently supported OS platforms are: Debian/Ubuntu, Red Hat/Fedora (if packages are needed)
#    * It is recommended to have at least 50GB of free disk space prior to installation (to test all guests).
#    * Make sure you have python 2.4 (or higher) installed.
#    * Do this all as root (or at least run the tests as root)
# Lots of configuration stuff would be needed as well.
RESTRICT="test"
# If anyone cares enough:
# https://github.com/autotest/virt-test and
# http://wiki.qemu.org/Testing

DEFAULT_SRC_COMPILE_PARAMS=( V=1 )

qemu_src_prepare() {
    # Don't install the docs directly. We do that in src_install.
    edo sed -i -e '/$(DESTDIR)$(docdir)/d' Makefile

    default
}

qemu_src_configure() {
    local my_targets=

    local myconfig=(
        --cc=${CC}
        --prefix=/usr
        --bindir=/usr/$(exhost --target)/bin
        --libdir=/usr/$(exhost --target)/lib
        --libexecdir=/usr/$(exhost --target)/libexec
        --localstatedir=/var
        --python=/usr/$(exhost --target)/bin/python2
        --sysconfdir=/etc
        --enable-cap-ng
        --enable-curl
        --enable-curses
        --enable-fdt
        --enable-guest-agent
        --enable-guest-base
        --enable-kvm
        --enable-linux-user
        --enable-modules
        --enable-seccomp
        --enable-stack-protector
        --enable-system
        --enable-tcg-interpreter
        --enable-tpm
        --enable-user
        --enable-uuid
        --enable-vhdx
        --enable-vhost-net
        --enable-vhost-scsi
        --disable-archipelago
        --disable-brlapi
        --disable-glusterfs
        --disable-numa
        --disable-rdma
        --disable-sparse
        --disable-strip
        --disable-werror
        --disable-xen
        --disable-xen-pci-passthrough
        --disable-xfsctl # needs xfs/xfs.h, which isnt installed by xfsprogs atm
        --with-system-pixman # required for softmmu
        --without-vss-sdk
        --without-win-sdk
        $(option iasl && echo --iasl=/usr/$(exhost --target)/bin/iasl)
        $(option lzo && echo --enable-lzo)
        $(option_enable async linux-aio)
        $(option_enable bluetooth bluez)
        $(option_enable gnutls vnc-tls)
        $(option_enable gnutls vnc-ws)
        $(option_enable iscsi libiscsi)
        $(option_enable jpeg vnc-jpeg)
        $(option_enable lzo)
        $(option_enable netmap)
        $(option_enable nfs libnfs)
        $(option_enable opengl glx)
        $(option_enable png vnc-png)
        $(option_enable quorum)
        $(option_enable rbd)
        $(option_enable sasl vnc-sasl)
        $(option_enable sdl)
        $(option_enable smartcard smartcard-nss)
        $(option_enable snappy)
        $(option_enable spice)
        $(option_enable ssh-block-dev libssh2)
        $(option_enable usb-passthrough libusb)
        $(option_enable usb-redirection usb-redir)
        $(option_enable vde)
        $(option_enable virtfs)
        $(option_enable xattr attr)
    )

    # audio drivers
    local myaudiodrv="--audio-drv-list="
    option alsa && myaudiodrv+="alsa "
    option pulseaudio && myaudiodrv+="pa "
    option sdl && myaudiodrv+="sdl "

    # features
    if option debug ; then
        myconfig+=( --enable-debug-info )
    else
        myconfig+=( --disable-debug-info )
    fi

    if option gtk2 ; then
        myconfig+=(
            --enable-gtk
            --with-gtkabi=2.0
        )
    elif option gtk3 ; then
        myconfig+=(
            --enable-gtk
            --enable-vte
            --with-gtkabi=3.0
        )
    else
        myconfig+=( --disable-gtk )
    fi

    # targets
    option aarch64 && my_targets+=",aarch64-linux-user,aarch64-softmmu"
    option arm && my_targets+=",arm-linux-user,armeb-linux-user,arm-softmmu"
    option amd64 && my_targets+=",x86_64-linux-user,x86_64-softmmu"
    option mips && my_targets+=",mips-linux-user,mips-softmmu"
    option ppc && my_targets+=",ppc-linux-user,ppcemb-softmmu,ppc-softmmu"
    option ppc64 && my_targets+=",ppc64-linux-user,ppc64abi32-linux-user,ppc64-softmmu"
    option x86 && my_targets+=",i386-linux-user,i386-softmmu"

    edo ./configure \
        "${myconfig[@]}" \
        "${myaudiodrv}" \
        --target-list=${my_targets:1}
}

qemu_src_install() {
    default

    insinto /etc/qemu/
    insopts -m0755
    doins "${FILES}"/qemu-if{down,up}
    option sasl && doins qemu.sasl

    newdoc pc-bios/README README.pc-bios
    dodoc qemu-{doc,tech}.html
    dodoc qemu.sasl
    dodoc -r docs/*
    # dodoc -r QMP

    # Remove obsolete docdir
    edo rm \
        "${IMAGE}"/usr/share/doc/qemu/qemu-{doc,tech}.html \
        "${IMAGE}"/usr/share/doc/qemu/qmp-commands.txt
    edo rmdir "${IMAGE}"/usr/share/doc/qemu

    # Remove empty dirs
    edo rmdir "${IMAGE}"/var/{run,}

    arch=${CHOST%%-*}
    case ${arch} in
      i486|i586|i686|x86) arch=i386 ;;
      amd64) arch=x86_64 ;;
    esac

    dodir /usr/$(exhost --target)/bin
    dosym /usr/$(exhost --target)/bin/qemu-system-${arch} /usr/$(exhost --target)/bin/qemu
    dosym /usr/$(exhost --target)/bin/qemu-system-${arch} /usr/$(exhost --target)/bin/qemu-kvm

    exeinto /usr/$(exhost --target)/bin
    doexe scripts/kvm/*

    insinto "${UDEVRULESDIR}"
    hereins 65-kvm.rules <<EOF
KERNEL=="kvm", GROUP="kvm", MODE="0660"
EOF
}

qemu_pkg_postinst() {
    local cruft=( /etc/udev/rules.d/65-kvm.rules )
    for file in ${cruft[@]}; do
        if test -f "${file}" ; then
            nonfatal edo rm "${file}" || eerror "removing ${file} failed"
        fi
    done

    elog "Make sure your user is in the 'kvm' group"
    elog
    elog "You will need the Universal TUN/TAP driver compiled into your"
    elog "kernel or loaded as a module to use the virtual network device"
    elog "if using -net tap. You will also need support for 802.1d"
    elog "Ethernet Bridging and a configured bridge if using the provided"
    elog "qemu-ifup script from /etc/qemu."
}

